ds <- read.table("./data/exemple_read.txt",
header = TRUE,
sep = ";",
dec = ",")
head(ds)
write.table(ds, "./data/ds.txt", sep = "\t", dec = ".")
my_df<-iris %>%
group_by(Species)%>%
summarise(moyenne=mean(Sepal.Length, na.rm=TRUE), sd=sd(Sepal.Length, na.rm=TRUE))
my_df<-iris %>%
group_by(Species)%>%
summarise(moyenne=mean(Sepal.Length, na.rm=TRUE), sd=sd(Sepal.Length, na.rm=TRUE))
#libraries
library(ggplot2)
library(base)
library(psych)
library(dplyr)
library(stats)
library(FSA)
library(ggpubr)
library(corrplot)
library(ggpmisc)
install.packages("ggpmisc")
install.packages("ggpmisc")
#libraries
library(ggplot2)
library(base)
library(psych)
library(dplyr)
library(stats)
library(FSA)
library(ggpubr)
library(corrplot)
library(ggpmisc)
library(graphics)
library(broom)
alldata = read.table(file ="./data_explore.txt",
check.names = TRUE,
header = TRUE,
sep = "\t",
row.names = 1)
alldata = read.table(file ="./data/data_explore.txt",
check.names = TRUE,
header = TRUE,
sep = "\t",
row.names = 1)
#see
alldata
#Keep only data that correspond to "EU" in the Geo column
subgroupEU = subset(alldata, Geo=="EU")
#See
subgroupEU
#Keep only data that correspond to group A & B in the group column
subgroupAB = subset(alldata, groupe=="A" | groupe=="B")
#See
subgroupAB
# FIRST create a dataframe with a vector with  values of your new variable
mydataframe = data.frame(MYNEWVAR = c("sediment", "mer", "sediment",
"trap", "mer", "mer",
"trap", "trap", "trap",
"sediment", "mer", "mer",
"mer", "trap", "trap",
"mer", "mer"))
#Add rownames=samples names
row.names(mydataframe) = c("U1H", "U2H", "U5F",
"U6F", "U3H", "U7F",
"U4H", "U8F", "E2H",
"E3H", "E5F", "E1H",
"E7F", "E6F", "E4H",
"E9F", "E8F")
# See & notice that order of sample names is not the same as in mesdata
mydataframe
#Option "by=" the way that you want to merge... here looking for same row.names between the two dataframe
# in mydataframe and mesdata
alldata = merge(mesdata,mydataframe, by="row.names")
descriptstats = describe(alldata)
#see
descriptstats
#Distribution of NO2 for all data
ggplot(data=alldata, aes(x=NO2)) +
geom_density(adjust=1.5, alpha=.4,show.legend=TRUE, aes(fill="red"))
#Distribution of NO2 separated by groups
ggplot(data=alldata, aes(x=NO2, group=Geo, fill=Geo)) +
geom_density(adjust=1.5, alpha=.4)
myselection = select(alldata, observed,NRI, evenness)
#See
myselection
indices_normality(myselection, nrow =3, ncol = 2)
#Function indice_normality
indices_normality <- function(rich, nrow, ncol) {
### p-value < 0.05 means data failed normality test
par(mfrow = c(nrow, ncol))
for (i in names(rich)) {
shap <- shapiro.test(rich[, i])
qqnorm(rich[, i], main = i, sub = shap$p.value)
qqline(rich[, i])
}
par(mfrow = c(1, 1))
}
############
#Function multiple panel with linear regression & r values
regression_line = function(x,y, ...){
points(x,y,...)
linear_regression = lm(y~x)
linear_regression_line = abline(linear_regression, col="red")
}
###########
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use = "complete.obs"))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste(prefix, txt, sep = "")
if (missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex =  cex.cor * (1 + r) / 2)
}
indices_normality(myselection, nrow =3, ncol = 2)
# How many groups used? See the column "groupe" of alldata (4 groups A,B,C,D):
factor(alldata$groupe)
# Check homogeneity of variance between groups
# (this is to avoid bias in ANOVA result & keep the power of the test)
# H0= equality of variances in the different populations
bartlett.test(NH4 ~ groupe, alldata)
#Global test
aov_NH4 = aov(NH4 ~ groupe, alldata)
summary(aov_NH4)
#Pairwise-comparisons
signif_pairgroups = TukeyHSD(aov_NH4, method = "bh")
signif_pairgroups
plot(TukeyHSD(aov_NH4, conf.level=.95), las = 2)
convert_format_Tukey = tidy(signif_pairgroups)
convert_format_Tukey
convert_format_Tukey = separate(convert_format_Tukey,contrast, c('group1', 'group2'),sep = "-")
convert_format_Tukey$p.adj.signif = c("ns","ns","ns","ns","*","ns")
convert_format_Tukey
#Build column "custom.label" with condition
convert_format_Tukey$custom.label = ifelse(convert_format_Tukey1$adj.p.value <= 0.05, convert_format_Tukey$adj.p.value,"ns")
#boxplot
mygraph=ggplot(alldata, aes(x = groupe, y = NH4)) +
geom_boxplot(aes(color = groupe, fill = groupe))
mygraph
mygraph +
geom_bracket(
aes(xmin = group1, xmax = group2, label = round(adj.p.value,2)),
data=convert_format_Tukey, y.position = 1.25,step.increase = 0.1,
tip.length = 0.01, color="blue")
mygraph +
geom_bracket(
aes(xmin = group1, xmax = group2, label = p.adj.signif),
data=convert_format_Tukey, y.position = 1.25,step.increase = 0.1,
tip.length = 0.01, color="blue")
#Build column "custom.label" with condition
convert_format_Tukey$custom.label = ifelse(convert_format_Tukey1$adj.p.value <= 0.05, convert_format_Tukey$adj.p.value,"ns")
convert_format_Tukey = tidy(signif_pairgroups)
convert_format_Tukey
convert_format_Tukey = separate(convert_format_Tukey,contrast, c('group1', 'group2'),sep = "-")
install.packages("tidyr")
library(tidyr)
convert_format_Tukey = tidy(signif_pairgroups)
convert_format_Tukey = tidy(signif_pairgroups)
library(dplyr)
convert_format_Tukey = tidy(signif_pairgroups)
install.packages("markdown")
convert_format_Tukey = tibble(signif_pairgroups)
convert_format_Tukey = tidy(signif_pairgroups)
convert_format_Tukey = broom::tidy(signif_pairgroups)
convert_format_Tukey
#libraries
library(ggplot2)
library(base)
library(psych)
library(dplyr)
library(stats)
library(FSA)
library(ggpubr)
library(corrplot)
library(ggpmisc)
library(graphics)
library(broom)
convert_format_Tukey = separate(convert_format_Tukey,contrast, c('group1', 'group2'),sep = "-")
convert_format_Tukey
convert_format_Tukey$p.adj.signif = c("ns","ns","ns","ns","*","ns")
convert_format_Tukey
#Build column "custom.label" with condition
convert_format_Tukey$custom.label = ifelse(convert_format_Tukey$adj.p.value <= 0.05, convert_format_Tukey$adj.p.value,"ns")
convert_format_Tukey
#boxplot
mygraph=ggplot(alldata, aes(x = groupe, y = NH4)) +
geom_boxplot(aes(color = groupe, fill = groupe))
mygraph
mygraph +
geom_bracket(
aes(xmin = group1, xmax = group2, label = round(adj.p.value,2)),
data=convert_format_Tukey, y.position = 1.25,step.increase = 0.1,
tip.length = 0.01, color="blue")
mygraph +
geom_bracket(
aes(xmin = group1, xmax = group2, label = p.adj.signif),
data=convert_format_Tukey, y.position = 1.25,step.increase = 0.1,
tip.length = 0.01, color="blue")
mygraph +
geom_bracket(
xmin = c("B","A"), xmax = c("D","C"), label = c("*","ns"),
y.position = 1.5,step.increase = 0.1,
tip.length = 0.01, color="blue")
library(rmarkdown)
#libraries
library(ggplot2)
library(base)
library(psych)
library(dplyr)
library(stats)
library(FSA)
library(ggpubr)
library(corrplot)
library(ggpmisc)
library(graphics)
library(broom)
#Function indice_normality
indices_normality <- function(rich, nrow, ncol) {
### p-value < 0.05 means data failed normality test
par(mfrow = c(nrow, ncol))
for (i in names(rich)) {
shap <- shapiro.test(rich[, i])
qqnorm(rich[, i], main = i, sub = shap$p.value)
qqline(rich[, i])
}
par(mfrow = c(1, 1))
}
############
#Function multiple panel with linear regression & r values
regression_line = function(x,y, ...){
points(x,y,...)
linear_regression = lm(y~x)
linear_regression_line = abline(linear_regression, col="red")
}
###########
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use = "complete.obs"))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste(prefix, txt, sep = "")
if (missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex =  cex.cor * (1 + r) / 2)
}
alldata = read.table(file ="./data/data_explore.txt",
check.names = TRUE,
header = TRUE,
sep = "\t",
row.names = 1)
#see
alldata
#Keep only data that correspond to "EU" in the Geo column
subgroupEU = subset(alldata, Geo=="EU")
#See
subgroupEU
# FIRST create a dataframe with a vector with  values of your new variable
mydataframe = data.frame(MYNEWVAR = c("sediment", "mer", "sediment",
"trap", "mer", "mer",
"trap", "trap", "trap",
"sediment", "mer", "mer",
"mer", "trap", "trap",
"mer", "mer"))
#Add rownames=samples names
row.names(mydataframe) = c("U1H", "U2H", "U5F",
"U6F", "U3H", "U7F",
"U4H", "U8F", "E2H",
"E3H", "E5F", "E1H",
"E7F", "E6F", "E4H",
"E9F", "E8F")
# See & notice that order of sample names is not the same as in mesdata
mydataframe
#Option "by=" the way that you want to merge... here looking for same row.names between the two dataframe
# in mydataframe and mesdata
alldata = merge(mesdata,mydataframe, by="row.names")
#Option "by=" the way that you want to merge... here looking for same row.names between the two dataframe
# in mydataframe and mesdata
alldata = merge(mesdata,mydataframe, by="row.names")
#libraries
library(ggplot2)
library(base)
library(psych)
library(dplyr)
library(stats)
library(FSA)
library(ggpubr)
library(corrplot)
library(ggpmisc)
library(graphics)
library(broom)
library(dplyr)
alldata = read.table(file ="./data/data_explore.txt",
check.names = TRUE,
header = TRUE,
sep = "\t",
row.names = 1)
#Option "by=" the way that you want to merge... here looking for same row.names between the two dataframe
# in mydataframe and mesdata
alldata = merge(mesdata,mydataframe, by="row.names")
# FIRST create a dataframe with a vector with  values of your new variable
mydataframe = data.frame(MYNEWVAR = c("sediment", "mer", "sediment",
"trap", "mer", "mer",
"trap", "trap", "trap",
"sediment", "mer", "mer",
"mer", "trap", "trap",
"mer", "mer"))
#Add rownames=samples names
row.names(mydataframe) = c("U1H", "U2H", "U5F",
"U6F", "U3H", "U7F",
"U4H", "U8F", "E2H",
"E3H", "E5F", "E1H",
"E7F", "E6F", "E4H",
"E9F", "E8F")
# See & notice that order of sample names is not the same as in mesdata
mydataframe
#Keep only data that correspond to group A & B in the group column
subgroupAB = subset(alldata, groupe=="A" | groupe=="B")
#See
subgroupAB
#see
alldata
#Option "by=" the way that you want to merge... here looking for same row.names between the two dataframe
# in mydataframe and mesdata
alldata = merge(mesdata,mydataframe, by="row.names")
#Option "by=" the way that you want to merge... here looking for same row.names between the two dataframe
# in mydataframe and mesdata
alldata = base::merge(mesdata,mydataframe, by="row.names")
alldata
mydataframe
#Option "by=" the way that you want to merge... here looking for same row.names between the two dataframe
# in mydataframe and mesdata
alldata = merge(alldata,mydataframe, by="row.names")
#check that it works
alldata
#libraries
library(ggplot2)
library(base)
library(psych)
library(dplyr)
library(stats)
library(FSA)
library(ggpubr)
library(corrplot)
library(ggpmisc)
library(graphics)
library(broom)
library(dplyr)
library(tidyr)
#libraries
library(ggplot2)
library(base)
library(psych)
library(dplyr)
library(stats)
library(FSA)
library(ggpubr)
library(corrplot)
library(ggpmisc)
library(graphics)
library(broom)
library(dplyr)
library(tidyr)
#| echo: true
#libraries
library(ggplot2)
library(base)
library(psych)
library(dplyr)
library(stats)
library(FSA)
library(ggpubr)
library(corrplot)
library(ggpmisc)
library(graphics)
library(broom)
library(dplyr)
library(tidyr)
#Function indice_normality
indices_normality <- function(rich, nrow, ncol) {
### p-value < 0.05 means data failed normality test
par(mfrow = c(nrow, ncol))
for (i in names(rich)) {
shap <- shapiro.test(rich[, i])
qqnorm(rich[, i], main = i, sub = shap$p.value)
qqline(rich[, i])
}
par(mfrow = c(1, 1))
}
############
#Function multiple panel with linear regression & r values
regression_line = function(x,y, ...){
points(x,y,...)
linear_regression = lm(y~x)
linear_regression_line = abline(linear_regression, col="red")
}
###########
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use = "complete.obs"))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste(prefix, txt, sep = "")
if (missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex =  cex.cor * (1 + r) / 2)
}
install.packages("plotly")
install.packages("tidyverse")
